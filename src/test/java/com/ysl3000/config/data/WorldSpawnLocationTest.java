package com.ysl3000.config.data;

import be.seeseemelk.mockbukkit.ServerMock;
import com.ysl3000.stubs.SmartBukkitStub;
import org.bukkit.Location;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

/**
 * Created by ysl3000
 */
public class WorldSpawnLocationTest {

  private static final String WORLD_NAME= "SmartServerWorld";


  private WorldSpawnWrapper worldSpawnWrapper;

  private Location location;
  private WorldSpawnLocation worldSpawns;


  @Before
  public void setUp() {
    ServerMock serverMock = SmartBukkitStub.mock();
    this.location = new Location(serverMock.addSimpleWorld(WORLD_NAME), 1337, 144, 42);
    this.worldSpawns = new WorldSpawnLocation();
    this.worldSpawnWrapper = new WorldSpawnWrapper(worldSpawns);

  }

  @Test
  public void getSpawnpointForWorldShouldGenerateValueOnAbsent() {


    Assert.assertFalse(containsKey(WORLD_NAME));

    Location autogeneratedPosition = worldSpawnWrapper.getSpawnpointForWorld(location);

    Assert.assertEquals(this.location, autogeneratedPosition);
    Assert.assertTrue(containsKey(WORLD_NAME));

  }

  @Test
  public void settingTheWorldSpawnShouldWork() {

    Assert.assertFalse(containsKey(WORLD_NAME));

    this.worldSpawnWrapper.setSpawnPointForWorld(this.location);

    Assert.assertTrue(containsKey(WORLD_NAME));

  }

  @After
  public void after(){
    SmartBukkitStub.unset();
  }

  private boolean containsKey(String name){
    return worldSpawnWrapper.getWorldSpawnLocation().getWorldSpawns().stream().anyMatch(k-> k.getWorldName().equalsIgnoreCase(name));
  }

}
